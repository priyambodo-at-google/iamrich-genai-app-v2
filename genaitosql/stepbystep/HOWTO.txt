Option One - Via the IDE
========================

Create the virtual environment

$ python3 -m venv env
Activate the virtual environment

$ source env/bin/activate
Install dependencies using

$ pip install -r requirements.txt
Set Environment Variables

export CONFIG_FILE=/Users/priyambodo/Desktop/Coding/03.gen-ai-blackbelt-ambassador/01.capstone-project-doddipriyambodo/github-published-apps/iamrich-genai-app-v2/genaitosql
eg. /Users/xxx/PycharmProjects/GenAIProject/config.yml
Update the required fields in the config.yml file

gcp:
  project_id: <PROJECT ID>
  region: <REGION>
Set Project Root Directory

GenAIProject
eg. /Users/xxx/PycharmProjects/GenAIProject/
Run Streamlit (from the project root directory)
$ streamlit run app.py
Note: For this application to run locally, you must have gcloud installed and authorised


Deploy Container to GCP Container Register
Set an environment variables
export GOOGLE_CLOUD_PROJECT="<enter project id>"
export CONTAINER_NAME='streamlit-bigquery-q-and-a'
export APP_NAME='streamlit-bigquery-q-and-a'
export REGION="us-central1"
export AR_NAME="streamlit" 
export AR_URI=${REGION}-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/${AR_NAME}
export SERVICE_ACCOUNT="<enter service account for cloud run"
gcloud auth application-default login
gcloud auth login
gcloud config set project ${GOOGLE_CLOUD_PROJECT}
Create a repository in Artifact Registry
gcloud artifacts repositories create ${AR_NAME} --location=${REGION} --repository-format=docker
Note: If this command fails, run the below and try again:

gcloud components update
Create Docker file
Copy the following into a Dockerfile (if not exists)

FROM python:3.9-slim
WORKDIR /app
COPY . .
RUN pip3 install -r requirements.txt
EXPOSE 8501
ENTRYPOINT ["streamlit", "run", "app.py","--server.port=8501"]
Setup Docker auth
gcloud auth configure-docker us-central1-docker.pkg.dev

Create and tag docker image
docker build -t ${AR_URI}/${CONTAINER_NAME} .
Push to Artifact Registry
docker push ${AR_URI}/${CONTAINER_NAME}
Cloud from Service Identity
By default, Cloud Run revisions and jobs execute as the Compute Engine default service account. The Compute Engine default service account has the Project Editor IAM role which grants read and write permissions on all resources in your Google Cloud project. While this may be convenient, rather than use the default service account, Google recommends creating your own user-managed service account with the most granular permissions and assigning that service account as your Cloud Run service or job identity.

See the doce here for details here

Deploy to Cloud Run
gcloud run deploy ${APP_NAME} \
--image=${AR_URI}/${CONTAINER_NAME} \
--platform=managed \
--port 8501 \
--service-account=${SERVICE_ACCOUNT} \
--region=${REGION} \
--cpu=2 --memory=1Gi \
--max-instances=2 \
--allow-unauthenticated
Note, remove this flag if you don't want to allow unauthenticated access:

--allow-unauthenticated


